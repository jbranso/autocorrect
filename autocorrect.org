(use-package autocorrect :ensure t
             :config (abbrev-mode 1))

* My autocorrect word package
** my regexp for testing words
#+BEGIN_SRC emacs-lisp
  (defvar autocorrect-regexp "^[a-zA-Z]+[;.,?!)\"]\\{0,3\\}$"
  "autocorrect-regexp is the regexp that makes sure the word is a word that we want to try to correct.
For example, my package should not try to correct a variable name.  So any word with any special
symbols in the middle of it or numbers, should not be corrected.")
#+END_SRC

I also do some regexp testing on this function [[file:regression-testing.org::*Testing%20my%20regexp][here.]]
** tweaking post-self-insert-hook

#+BEGIN_SRC emacs-lisp
(defun autocorrect/word-is-correctable ()
"This function makes sure that we are not calling ispell on words that are not meant to be corrected.  Like 'variable2'."
(interactive))
#+END_SRC

Modify post-self-insert-hook to run "flyspell-auto-correct-word", if the character is SPC

#+BEGIN_SRC emacs-lisp
  (defun reg-test/previous-word ()
    "Returns the previous word in the buffer."
    (interactive)
    (let (reg-test/previous-word current-point)
      (setq current-point (point))
      (setq reg-test/previous-word (progn
                                     (backward-word)
                                     (word-at-point)))
      (goto-char current-point)
      reg-test/previous-word))
#+END_SRC

#+BEGIN_SRC emacs-lisp

#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun my/flyspell-auto-correct-word ()
    "If the last entered character is SPC, then run flyspell-auto-correct-word on the last word "
    (interactive)
    (let (previousWord previousChar nextChar current-point)
      (setq current-point (point))
      (setq previousWord (reg-test/previous-word))
      ;; get the char before point.  If you have just pressed the space bar, then the char before point is SPC.
      ;; if you have just pressed "h", then the char before point is "h".
      (setq previousChar
            (substring (buffer-substring (- (point) 1) (point)) 0))
      (setq nextChar
            (substring (buffer-substring (point) (+ 1 (point))) 0))
      (when (and (string= previousChar " ")
                 ;; the string should just be alphanumeric characters, or it might have punctuation at the end.  Like "Hello?"
                 ;; (additional details)
                 ;; "I am a sentence," said me.
                 ;; "I don't care what you think," said Sally, "but if you would like, I can punch you in the face."
                 (string-match autocorrect-regexp previousWord ))
        (progn
          (flyspell-auto-correct-word)))
      (goto-char current-point)))
#+END_SRC

** Defining some hooks
For the moment my auto correct word is not working. I am going to fix it soon.

#+BEGIN_SRC emacs-lisp
(defun add-my-flyspell-auto-correct-word-hook ()
  "This function adds my/flyspell-auto-correct-word function to be run after post-self-insert-hook."
  (interactive)
  (add-hook 'post-self-insert-hook 'my/flyspell-auto-correct-word))

(defun remove-my-flyspell-auto-correct-word-hook ()
  "This function adds my/flyspell-auto-correct-word function to be run after post-self-insert-hook."
  (interactive)
  (remove-hook 'post-self-insert-hook 'my/flyspell-auto-correct-word))
#+END_SRC


Turn on autocorrect last word for all of my text modes.
It might be a bad idea to turn it on for programming modes.  If you have a variable named "becuase", it'll keep correcting it.

(add-hook 'text-mode-hook #'add-my-flyspell-auto-correct-word-hook)
(add-hook 'programming-mode-hook #'remove-my-flyspell-auto-correct-word-hook)

#+BEGIN_SRC emacs-lisp
(provide 'init-autocorrect)
#+END_SRC
