(use-package autocorrect :ensure t
             :config (abbrev-mode 1))


* autocorrect-mode
** Introduction
Autocorrect-mode will automatically attempt to correct misspelled words as you type them.  Right now only org-mode is supported, and it is a pretty hacky way of it working.  Essentially, it is always run after a key press, BUT if the current mode is NOT org-mode, then nothing happens.  More on this [[*tweaking post-self-insert-hook][here]].

Here are my package comments for the .el file.
#+BEGIN_SRC emacs-lisp
;;; autocorrect.el --- automatically attempt to correct misspelled words as you type them.

;;; Copyright (C) 2016
;;
;;
;; Author: Joshua Branson
;; Maintainer: Joshua Branson
;; Keywords: autocorrect, org-mode, text-mode
;; Homepage: https://github.com/jbranso/autocorrect/blob/master/README.md
;;
;; This file is NOT part of GNU Emacs.
;;
;; Autocorrect is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; Autocorrect is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with Autocorrect.  If not, see <http://www.gnu.org/licenses/>.
;;
;;; Commentary:
;;
;; autocorrect automatically attempts to correct misspelled words as you type them. Currently only text-mode and org-mode are
;; supported.
;;
;; Installation and Activation
;; ---------------------------
;; See the corresponding sections in the readme at
;;
;;  https://github.com/jbranso/autocorrect/blob/master/README.md
;;
;;; Code:


#+END_SRC
** My regexp for testing words
#+BEGIN_SRC emacs-lisp
  (defvar autocorrect-regexp "^[a-zA-Z]+[;.,?!)\"]\\{0,3\\}$"
  "autocorrect-regexp is the regexp that makes sure the word is a word that we want to try to correct.
For example, my package should not try to correct a variable name.  So any word with any special
symbols in the middle of it or numbers, should not be corrected.  Here are some examples of words that will be corrected:

hello
pig,
dog;
cat?
hello...
why!?

Here are some words that will not be corrected:

h3ll0
w4y?
part-time
else$where!?
")
#+END_SRC

I also do regression testing on the autocorrect-regexp [[file:regression-testing.org::*Testing%20my%20regexp][here.]]
** is the word correctable

This checks to see if the word is essentially made up only of letters, but maybe ends in punctuation.  OR, if the major mode is org mode, it will check to see if point is in an org babel code block.  If point is in a src-block, then it will not correct any words at point.


#+BEGIN_SRC emacs-lisp
  (defun autocorrect-is-word-correctable (string)
    (if (string= major-mode "org-mode")
        (and
         (string-match autocorrect-regexp string)
         (let (my/org-element-at-point)
           (setq my/org-element-at-point (car (org-element-at-point)))
           (not (or (string= "src-block" my/org-element-at-point)
                    (string= "node-property" my/org-element-at-point)
                    (string= "drawer" my/org-element-at-point)
                    (string= "keyword" my/org-element-at-point)
                    (string= "babel-call" my/org-element-at-point)
                    (string= "clock" my/org-element-at-point)
                    (string= "latex-environment" my/org-element-at-point)
                    (string= "table" my/org-element-at-point)
                    (string= "table-row" my/org-element-at-point)
                    (string= "export-snippet" my/org-element-at-point)
                    (string= "footnote-reference" my/org-element-at-point)
                    (string= "inline-babel-call" my/org-element-at-point)
                    (string= "inline-src-block" my/org-element-at-point)
                    (string= "link" my/org-element-at-point)
                    (string= "subscript" my/org-element-at-point)
                    (string= "superscript" my/org-element-at-point)
                    (string= "timestamp" my/org-element-at-point))))
      (string-match autocorrect-regexp string))))
#+END_SRC
** Getting the previous word
This just returns the word before point or the word that point is on.
#+BEGIN_SRC emacs-lisp
  (defun autocorrect-previous-word ()
    "Returns the previous word in the buffer."
    (interactive)
    (let (autocorrect-previous-word current-point)
      (setq current-point (point))
      (setq autocorrect-previous-word (progn
                                     (backward-word)
                                     (word-at-point)))
      (goto-char current-point)
      autocorrect-previous-word))
#+END_SRC

** tweaking post-self-insert-hook

This is where the magic happens!  This function checks to see if the last entered key was the space key.  If it was, then it checks to see if the last word is made up of letters and possibly ends with punctuation.  If it does, then it runs ~(flyspell-auto-correct-word)~.
#+BEGIN_SRC emacs-lisp
  (defun autocorrect-flyspell-autocorrect-word ()
    "If the last entered character is SPC, then run flyspell-auto-correct-word on the last word "
    (interactive)
    (when (or
           (string= major-mode "org-mode")
           (string= major-mode "text-mode"))
      (let (previous-word previous-char current-point)
        (setq current-point (point))
        (setq previous-word (autocorrect-previous-word))
        ;; get the char before point.  For example, if you have just pressed the space bar, then the char before point is SPC.
        ;; Another example: if you have just pressed "h", then the char before point is "h".
        (setq previous-char
              (substring (buffer-substring (- (point) 1) (point)) 0))
        (when (and (string= previous-char " ")
                   ;; the string should just be alphanumeric characters, or it might have punctuation at the end.  Like "Hello?"
                   ;; (additional details)
                   ;; "I am a sentence," said me.
                   ;; "I don't care what you think," said Sally, "but if you would like, I can punch you in the face."
                   (autocorrect-is-word-correctable previous-word))
          (progn
            ;; if this word is already defined in abbrev-mode, then just expand it as a user-defined abbreviation.  Otherwise,
            ;; let flyspell expand it.
            (if (abbrev-symbol previous-word)
                (abbrev-insert previous-word)
              (flyspell-auto-correct-word))))
        (goto-char current-point))))
#+END_SRC

** COMMENT Determine if the major mode is programming-mode

I'm having issues with this defun.
#+BEGIN_SRC emacs-lisp
  (defun autocorrect-mode-is-a-prog-mode ()
    (cond
     ((string= major-mode "ido-mode") (autocorrect-remove-autocorrect-hook))
     ((string= major-mode "helm-mode") (autocorrect-remove-autocorrect-hook))
     ((string= major-mode "help-mode") (autocorrect-remove-autocorrect-hook))
     ((string= major-mode "fundamental-mode") (autocorrect-remove-autocorrect-hook))
     ((let (return-value)
        (setq return-value
              (string= "Parent mode: `prog-mode"
                       (substring (describe-function major-mode)
                                  (search "Parent mode:"
                                          (describe-function major-mode))
                                  119)))
        (delete-window
         (get-buffer-window "*Help*"))
        return-value))))
#+END_SRC
** COMMENT Determine if major mode is a text-mode
#+BEGIN_SRC emacs-lisp
  (defun autocorrect-mode-is-a-text-mode ()
    (cond
     ((string= major-mode "ido-mode") (autocorrect-remove-autocorrect-hook))
     ((string= major-mode "helm-mode") (autocorrect-remove-autocorrect-hook))
     ((string= major-mode "help-mode") (autocorrect-remove-autocorrect-hook))
     ((string= major-mode "fundamental-mode") (autocorrect-remove-autocorrect-hook))
     ((let (return-value)
        (setq return-value
              (string= "Parent mode: `text-mode"
                       (substring (describe-function major-mode)
                                  (search "Parent mode:"
                                          (describe-function major-mode))
                                  119)))
        (delete-window
         (get-buffer-window "*Help*"))
        return-value))))
#+END_SRC
** Defining some hooks
*** Functions to turn on and turn off autocorrect
#+BEGIN_SRC emacs-lisp
  (defun autocorrect-add-autocorrect-hook ()
    "This function adds autocorrect-flyspell-autocorrect-word function to be run after post-self-insert-hook."
    (interactive)
    (add-hook 'post-self-insert-hook 'autocorrect-flyspell-autocorrect-word))

  (defun autocorrect-remove-autocorrect-hook ()
    "This function adds autocorrect-flyspell-autocorrect-word function to be run after post-self-insert-hook."
    (interactive)
    (remove-hook 'post-self-insert-hook 'autocorrect-flyspell-autocorrect-word))

    (autocorrect-add-autocorrect-hook)
#+END_SRC

*** COMMENT turn off autocorrect when helm opens up
When I open a helm buffer, I DO NOT want auto-matic spell checking on.
#+BEGIN_SRC emacs-lisp
    (add-hook 'minibuffer-inactive-mode-hook 'autocorrect-remove-autocorrect-hook)
#+END_SRC

*** COMMENT Turn on autocorrect for text modes but not programmming modes

When I open a text-mode, then I'd like to have autocorrect on.  When I open a programming mode, I do not want autocorrect on.
#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook #'autocorrect-add-autocorrect-hook)
  (add-hook 'org-mode-hook #'autocorrect-add-autocorrect-hook)
  (add-hook 'programming-mode-hook #'autocorrect-remove-autocorrect-hook)
#+END_SRC

Turn on autocorrect last word for all of my text modes.
It might be a bad idea to turn it on for programming modes.  If you have a variable named "becuase", it'll keep correcting it.
*** COMMENT When major made changes, maybe turn on/off autocorrect

major-mode
#+BEGIN_SRC emacs-lisp
  (defun autocorrect-maybe-turn-on-autocorrect ()
    "This function checks to see if the current major-mode is text mode or org-mode.  If either is true, then it turns on
    autocorrecting.  If neither is true, then it turns off autocorrecting."
    (interactive)
    (cond
     ((string= major-mode "org-mode") (autocorrect-add-autocorrect-hook))
     ((string= major-mode "ido-mode") (autocorrect-remove-autocorrect-hook))
     ((string= major-mode "helm-mode") (autocorrect-remove-autocorrect-hook))
     ((string= major-mode "help-mode") (autocorrect-remove-autocorrect-hook))
     ((string= major-mode "fundamental-mode") (autocorrect-remove-autocorrect-hook))
     ((string= major-mode "help-mode") (autocorrect-remove-autocorrect-hook))
     ((autocorrect-mode-is-a-text-mode) (autocorrect-add-autocorrect-hook))
     ((autocorrect-mode-is-a-prog-mode) (autocorrect-remove-autocorrect-hook))
     (t (autocorrect-remove-autocorrect-hook))))

  (add-hook 'after-change-major-mode-hook #'autocorrect-maybe-turn-on-autocorrect)
  ;;(remove-hook 'after-change-major-mode-hook #'autocorrect-maybe-turn-on-autocorrect)
#+END_SRC

** Allowing the user to add a word to the dictionary.
*** Let a user define a custom expansion that differs from the default

Suppose you have incorrectly spelled "misspelling" to "mispelling", and flyspell incorrectly corrects your word to "mi spelling".  You can use this code that I found on endlessparenthesis.com to tell flyspell how to correct a particular misspelling.
Essentially you spelling the word "mispelling" and with point after the "g" is "mispelling", you then type ~C-c C-x $~ or call ~autocorrect-ispell-word-the-abbrev~.  This prompts you to specify what correct word you want "mispelling" to be corrected.

http://endlessparentheses.com/ispell-and-abbrev-the-perfect-auto-correct.html
I am not a fantastic typist. My speed is acceptable, but I make a great deal of mistakes. The following snippet has turned me into the Messi of keyboards.

Whenever I make a typo:

Hit C-x C-i, instead of erasing the mistake;
Select the appropriate correction (thanks to Ispell);
Sleep easier at night knowing I'll never see that mistake again (thanks to abbrev).

#+BEGIN_SRC emacs-lisp
(define-key ctl-x-map "\C-i" #'autocorrect-ispell-word-the-abbrev)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c C-x $") #'autocorrect-ispell-word-the-abbrev)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun autocorrect-ispell-word-the-abbrev (p)
  "Call `ispell-word', then create an abbrev for it.
With prefix P, create local abbrev. Otherwise it will
be global."
  (interactive "P")
  (let (bef aft)
    (save-excursion
      (while (progn
               (backward-word)
               (and (setq bef (thing-at-point 'word))
                    (not (ispell-word nil 'quiet)))))
      (setq aft (thing-at-point 'word)))
    (when (and aft bef (not (equal aft bef)))
      (setq aft (downcase aft))
      (setq bef (downcase bef))
      (define-abbrev
        (if p local-abbrev-table global-abbrev-table)
        bef aft)
      (message "\"%s\" now expands to \"%s\" %sally"
               bef aft (if p "loc" "glob")))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq save-abbrevs 'silently)
(setq-default abbrev-mode t)
#+END_SRC

*** Add a word to flyspell's dictionary

There already is a way to do this.  When you run the command ~(autocorrect-ispell-word-the-abbrev)~, you can type "i" [fn:1] to save that word to your local dictionary, but some people might not know that.  This is a specific function to add the word at point to a dictionary.  I found out how to do it here: http://stackoverflow.com/questions/22107182/in-emacs-flyspell-mode-how-to-add-new-word-to-dictionary

#+BEGIN_SRC emacs-lisp
(defun autocorrect-add-word-at-point-to-flyspell-dictionary ()
  (interactive)
  (let ((current-location (point))
         (word (flyspell-get-word)))
    (when (consp word)
      (flyspell-do-correct 'save nil (car word) current-location (cadr word) (caddr word) current-location))))
#+END_SRC

So what's a use case?  Simply.  You could use this [[http://phrontistery.info/isms.html][link]] to find some obscure validly spelled words that flyspell will wrongly spell.

For example, "agapism" (the ethics of love) gets autocorrected to "ageism".

To fix this, with point on "agapism", run the command ~autocorrect-add-word-at-point-to-flyspell-dictionary ()~.

*** COMMENT add a word to the dictionary the hacky way

This stops autocorrect from correcting a word that it believes is incorrect.

It is a hacky way to adds a word to the global abbrev file.  It is probably much better to just add it to your personal dictionary.

#+BEGIN_SRC emacs-lisp
  (defun autocorrect-add-word-to-dictionary (word)
    (interactive "sAdd Word to Dictionary: ")
    (define-abbrev global-abbrev-table word word))

#+END_SRC

** provide this file

#+BEGIN_SRC emacs-lisp
  (provide 'init-autocorrect)
  ;;; autocorrect.el ends here
#+END_SRC

* Footnotes

[fn:1] I found this out here

http://superuser.com/questions/419017/flyspell-save-word-to-dictionary
