#+TITLE: Regression Testing
#+AUTHOR: Joshua Branson

This is the bulk of the stuff that makes regression testing possible.  I have several functions that tests my test files.  First I correct any mistakes on the "before" line.  Then if that section matches the after line, we're good.

I might be able to alter this program with ~(find-file-no-select FILE)~ and ~(with-current-buffer BUFFER BODY)~.  The returns the buffer from FILE, and the second

* Testing my regexp
Before I run flyspell autcorrect word, I want to make sure that the word is a correctable word and is not something like a variable name.

|---------------------------+------------------------------------|
| Strings that should match | strings that shouldn't/won't match |
|---------------------------+------------------------------------|
| pig                       | ""  the null string                |
| pig,                      | hello;;;                           |
| pig.                      | 31hello23                          |
| pig."                     | hello23                            |
| pig?                      | 23hello                            |
| pig!                      | hell$o                             |
| pig!?                     | hello%                             |
| pig?!                     | he#llo                             |
| pig;                      | h@ello                             |
| pig)                      | hel!lo                             |
| pig.)                     | he?llo                             |
| pig...                    |                                    |
|---------------------------+------------------------------------|


#+BEGIN_SRC emacs-lisp
  (ert-deftest autocorrect-testing-my-regexp ()
    (should (string-match autocorrect-regexp "the" ))
    (should (string-match autocorrect-regexp "the." ))
    (should (string-match autocorrect-regexp "the?" ))
    (should (string-match autocorrect-regexp "the," ))
    (should (string-match autocorrect-regexp "the;" ))
    (should (string-match autocorrect-regexp "the!" ))
    (should (string-match autocorrect-regexp "the..." ))
    (should (string-match autocorrect-regexp "the\"" ))
    (should (string-match autocorrect-regexp "the" ))
    (should-not (string-match autocorrect-regexp "the21" ))
    (should-not (string-match autocorrect-regexp "21the" ))
    (should-not (string-match autocorrect-regexp "t.he" ))
    (should-not (string-match autocorrect-regexp "t?he" ))
    (should-not (string-match autocorrect-regexp "t?h@e" ))
    (should-not (string-match autocorrect-regexp "th$e" ))
    (should-not (string-match autocorrect-regexp "theh#e" ))
    (should-not (string-match autocorrect-regexp "theh#e" ))
    (should-not (string-match autocorrect-regexp "th%ehe" ))
    (should-not (string-match autocorrect-regexp "t^hehe" ))
    (should-not (string-match autocorrect-regexp "the&he" ))
    (should-not (string-match autocorrect-regexp "t*hehe" )))

#+END_SRC

* Functions for "before" and "after" sections.
** Go to the before and after sections.
#+BEGIN_SRC emacs-lisp
  (defun reg-test/go-to-before (reg-test/buffer)
    "go to the before line."
    (interactive)
    (find-file-noselect (concat "~/programming/emacs/autocorrect/tests/" reg-test/buffer))
    (with-current-buffer reg-test/buffer
      (beginning-of-buffer)
      (search-forward "* before")
      (next-line)
      (beginning-of-line)
      (forward-char 3)
      (let (reg-test/point)
        (setq reg-test/point
              (point))
        reg-test/point)))

  (defun reg-test/go-to-after (reg-test/buffer)
    "go to the before line."
    (interactive)
    (find-file-noselect (concat "~/programming/emacs/autocorrect/tests/" reg-test/buffer))
    (with-current-buffer reg-test/buffer
      (beginning-of-buffer)
      (search-forward "* after")
      (next-line)
      (beginning-of-line)
      (forward-char 3)
      (let (reg-test/point)
        (setq reg-test/point (point))
        reg-test/point)))

#+END_SRC


This should take point to the "before" heading.
(reg-test/go-to-before "words-are-correct.org")

This should take point to the "after" heading.
(reg-test/go-to-after "words-are-correct.org")

** Get the before and after line number positions.
#+BEGIN_SRC emacs-lisp
  (defun reg-test/get-before-line-number (reg-test/buffer)
    "This returns the line number at the before heading."
    (find-file-noselect (concat "~/programming/emacs/autocorrect/tests/" reg-test/buffer))
    (let (reg-test/line-number)
      (with-current-buffer reg-test/buffer
        (goto-char (reg-test/go-to-before reg-test/buffer))
        (setq reg-test/line-number
              (line-number-at-pos)))
      reg-test/line-number)
    )

  (defun reg-test/get-after-line-number (reg-test/buffer)
    "This returns the line number at the before heading."
    (find-file-noselect (concat "~/programming/emacs/autocorrect/tests/" reg-test/buffer))
    (let (reg-test/line-number)
      (with-current-buffer reg-test/buffer
        (goto-char (reg-test/go-to-after reg-test/buffer))
        (setq reg-test/line-number
              (line-number-at-pos)))
      reg-test/line-number))
#+END_SRC

This should get the before line number.

(reg-test/get-before-line-number "words-are-correct.org")

(reg-test/get-after-line-number "words-are-correct.org")
** return the before and after text.

#+BEGIN_SRC emacs-lisp

  (require 'ert)
  (defun reg-test/get-before (reg-test/buffer)
    "This returns the before text."
    (interactive)
    ;;(reg-test/go-to-before reg-test/buffer)
    (find-file-noselect (concat "~/programming/emacs/autocorrect/tests/" reg-test/buffer))
    (with-current-buffer reg-test/buffer
      (goto-char (reg-test/go-to-before reg-test/buffer))
      (buffer-substring (point) (progn
                                  (search-forward-regexp "$")
                                  (point)))))

  (defun reg-test/get-after (reg-test/buffer)
    "This returns the before text."
    (interactive)
    (find-file-noselect (concat "~/programming/emacs/autocorrect/tests/" reg-test/buffer))
    (with-current-buffer reg-test/buffer
      (goto-char (reg-test/go-to-after reg-test/buffer))
      (buffer-substring (point) (progn
                                  (search-forward-regexp "$")
                                  (point)))))

#+END_SRC

This should get me the before string.
(reg-test/get-before "words-are-correct.org")

This should get me the after string.
(reg-test/get-after "words-are-correct.org")

* Correct words on current line

#+BEGIN_SRC emacs-lisp
  (defun reg-test/correct-all-words-on-current-line (line reg-test/buffer)
    "This function will move to each word on the line, and press the space bar, which will call my/flyspell-auto-correct-word."
    (interactive)
    (forward-word)
    ;; I am now at the end of a word
    (when (equal line (line-number-at-pos))
      (insert " ")
      (autocorrect-flyspell-auto-correct-word)
      (reg-test/correct-all-words-on-current-line line reg-test/buffer)))
  #+END_SRC

  This should "correct" all the correct words on the before line of the "words-are-correct.org" file.
  (reg-test/correct-all-words-on-current-line
  (reg-test/get-before-line-number "words-are-correct.org")
      "words-are-correct.org")

* Run the tests
  #+BEGIN_SRC emacs-lisp
    (defun reg-test/autocorrect-words-are-correct (reg-test/buffer)
      "This function runs the test specifies in ./tests/words-are-correct.org"
      (interactive)
      (find-file-noselect (concat "~/programming/emacs/autocorrect/tests/" reg-test/buffer))
      (with-current-buffer reg-test/buffer
        (goto-char (reg-test/go-to-before reg-test/buffer))
        (reg-test/correct-all-words-on-current-line
         (reg-test/get-before-line-number reg-test/buffer)
         reg-test/buffer)))
       #+END_SRC
       This should run the run corrections on all words in the before line.

       (reg-test/autocorrect-words-are-correct "words-are-correct.org")


       #+BEGIN_SRC emacs-lisp
         (ert-deftest autocorrect-words-are-correct ()
           (let (reg-test/buffer)
             (setq reg-test/buffer "words-are-correct.org")
             (reg-test/autocorrect-words-are-correct reg-test/buffer)
             (should (let (stringEqual)
                       (setq stringEqual
                             (string= (reg-test/get-before reg-test/buffer) (reg-test/get-after reg-test/buffer)))
                       (kill-buffer reg-test/buffer)
                       stringEqual))))
#+END_SRC
* looking for bugs

(defun add-my-flyspell-auto-correct-word-hook ()
  "This function adds my/flyspell-auto-correct-word function to be run after post-self-insert-hook."
  (interactive)
  (add-hook 'post-self-insert-hook 'my/flyspell-auto-correct-word))

(defun remove-my-flyspell-auto-correct-word-hook ()
  "This function adds my/flyspell-auto-correct-word function to be run after post-self-insert-hook."
  (interactive)
  (remove-hook 'post-self-insert-hook 'my/flyspell-auto-correct-word))

** When you type in chars at the end of a buffer you get the error "Args out of range: #<buffer regression-testing.org>,9421,9428"
** Correcting two words together doesn't work.
If point is at '$', then pressing space there will do the following
"becaues$because" --> "becaues because"
This means that the word "becaues" did not get corrected.
** running these functions in fundamental mode will probably result in an error.
"autocorrect-is-a-prog-mode"
"autocorrect-is-a-text-mode"
